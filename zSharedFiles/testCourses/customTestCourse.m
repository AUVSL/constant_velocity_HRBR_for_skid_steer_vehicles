
% STEP 1: SPECIFY CORNER-POINT DATA
% Corner-point data is an nx3 array of [x, y, R] triples. x and y are the
% coordinates of the corner-point and R is the radius of curvature. At
% least 2 triples must be specified. Conflicting curvatures will result in
% an error during generation. The radius specified for the last
% corner-point has no effect on waypoint creation, but a value must still
% be given to make the generator happy.
cpData = [4,    12,     5;
          4,    20,     5;
          18,   20,     3;
          18,   13,     0.5;
          10,   13,     0.5;
          10,   12,     0.5;
          18,   12,     0.5;
          18,   9,      3;
          8,    4,      1;
          10,   2,      1;
          12,   4,      1;
          6,    8,      5;
          6,    12,     0.5;
          7,    12,     0.5;
          7,    13,     0.5;
          6,    13,     0.5;
          6,    14,     0.5;
          7,    14,     0.5;
          7,    15,     0.5;
          6,    15,     0.5;
          6,    16,     0.5;
          7,    16,     0.5;
          7,    17,     0.5;
          16,   17,     1;
          16,   15,     1;
          14,   15,     1;
          14,   17,     1;
          16,   17,     1];
  
% STEP 2: GENERATE WAYPOINTS
% Execute the generateWaypoints function. Inputs to the function are the
% corner-point data array previously created and the desired curvature
% step size.

generateWaypoints(cpData, 0.5);

%in this form so I can check commas between waypoints for Woojin\Marius Python are now semicollons
%{
waypoints = [[0.0, 0.0];        [1.0000, 0];  [1.7000, -0.1876]; 
      [2.2124, -0.7000];  [2.4000, -1.4000];  [2.5876, -2.1000]; 
      [3.1000, -2.6124];  [3.8000, -2.8000];  [4.5000, -2.6124]; 
      [5.0124, -2.1000];  [5.2000, -1.4000];  [5.3876, -0.7000]; 
      [5.9000, -0.1876];        [6.6000, 0];  [7.3000, -0.1876]; 
      [7.8124, -0.7000];  [8.0000, -1.4000];  [8.1876, -2.1000];  
      [8.7000, -2.6124];  [9.4000, -2.8000]; [10.1000, -2.6124]; 
     [10.6124, -2.1000]; [10.8000, -1.4000];  [10.9876, -0.7000]; 
     [11.5000, -0.1876];       [12.2000, 0]; [12.9000, -0.1876]; 
     [13.4124, -0.7000]; [13.6000, -1.4000]; [13.7876, -2.1000]; 
     [14.3000, -2.6124]; [15.0000, -2.8000]; [16.0000, -2.8000]];
assignin('base', 'path', waypoints);
%}
%{
waypoints =     [[0, 0];        [14.7800, 0];  [15.6427, -0.3573]; 
     [16.0000, -1.2200];  [16.0000, -4.7800];  [15.6427, -5.6427]; 
     [14.7800, -6.0000];   [1.2200, -6.0000];   [0.3573, -6.3573]; 
      [0.0000, -7.2200];  [0.0000, -10.7800];  [0.3573, -11.6427]; 
     [1.2200, -12.0000]; [14.7800, -12.0000]; [15.6427, -12.3573]; 
    [16.0000, -13.2200]; [16.0000, -16.7800]; [15.6427, -17.6427]; 
    [14.7800, -18.0000]; [-3.7800, -18.0000]; [-4.6427, -17.6427]; 
    [-5.0000, -16.7800];  [-5.0000, -1.2200];  [-4.6427, -0.3573]; 
           [-3.7800, 0];              [0, 0]];
assignin('base', 'path', waypoints);
%}
%{
waypoints = [[0.0, 0.0];              [1.0000, 0];        [1.7000, -0.1876];
      [2.2124, -0.7000];        [2.4000, -1.4000];        [2.5876, -2.1000];
      [3.1000, -2.6124];        [3.8000, -2.8000];        [4.5000, -2.6124];
      [5.0124, -2.1000];        [5.2000, -1.4000];        [5.3876, -0.7000];
      [5.9000, -0.1876];              [6.6000, 0];        [7.3000, -0.1876];
      [7.8124, -0.7000];        [8.0000, -1.4000];        [8.1876, -2.1000];
      [8.7000, -2.6124];        [9.4000, -2.8000];       [10.1000, -2.6124];
     [10.6124, -2.1000];       [10.8000, -1.4000];       [10.9876, -0.7000];
     [11.5000, -0.1876];             [12.2000, 0];       [12.9000, -0.1876];
     [13.4124, -0.7000];       [13.6000, -1.4000];       [13.7876, -2.1000];
     [14.3000, -2.6124];       [15.0000, -2.8000];       [16.0000, -2.8000]; 
     [16.7800, 0 - 2.8]; [17.6427, -0.3573 - 2.8]; [18.0000, -1.2200 - 2.8]; 
       [18.0000, -4.78];       [17.6427, -5.6427];         [16.7800, -6.00]; 
   [-3.78 + 0.5, -6.00]; [-4.6427 + 0.5, -5.6427];      [-5.0 + 0.5, -4.78]; 
   [-5.00 + 0.5, -1.22]; [-4.6427 + 0.5, -0.3573];         [-3.78 + 0.5, 0]; 
              [-0.5, 0]];
assignin('base', 'path', waypoints);
%}
% STEP 3: VIEW TEST COURSE (OPTIONAL)
% The plotTestCourse function can be used to view the generated path of
% waypoints. The black square indicates starting point, red asterisks
% indicate waypoints, red dashed lines indicates path.

plotTestCourse